legend.key.width = unit(1,"line"))+
coord_cartesian(ylim = c(0, 42000))+
scale_y_continuous(expand=c(0,0))+
scale_x_date(date_labels = "%Y-%m",breaks=breaks)+
labs(x="日期",y="累积下载量")
ggsave(filename.png, p, width = 1920/72, height = 1080/72, dpi = 72)
ggsave("filename.png", p, width = 1920/72, height = 1080/72, dpi = 72)
ggsave("filename.png", p, width = 1920/72, height = 1080/72, dpi = 144)
ggsave("filename.png", p, width = 1280/72, height = 800/72, dpi = 72)
ggsave("filename.png", p, width = 2490/72, height = 1080/72, dpi = 72)
ggsave("filename.png", p, width = 2490/72, height = 1480/72, dpi = 72)
ggsave("filename.png", p, width = 2490/72, height = 800/72, dpi = 72)
p<-ggplot(data,aes(x=x,y=y,group=package,color=package))+
geom_line(size=2)+
#  geom_text(aes(label=y),vjust=-0.4)+
scale_color_manual(values="red")+
theme_bw()+
theme(panel.grid = element_blank(),
panel.border = element_blank(),
#        panel.background = element_blank(),
axis.text.x = element_text(size = 20,face="bold"),
axis.title.x = element_text(size = 50,face = "bold",margin = margin(t = 10,b = 10)),
axis.line.x.bottom = element_line(size=2),
axis.line.y.left = element_line(size=2),
axis.text.y = element_text(size = 20,face = "bold"),
axis.title.y = element_text(size = 50,face = "bold",,margin = margin(r = 10,l = 10)),
axis.ticks = element_line(size=2),
# axis.line.x.top = element_blank(),
# axis.line.y.right = element_blank(),
legend.title = element_text(size=15,face="bold"),
legend.text = element_text(size=15,face="bold"),
#        legend.position = c(0.5,1),
legend.box.background = element_blank(),
legend.background = element_rect(fill="transparent",color="transparent",size=0.3),
legend.key.height  = unit(0.45,"line"),
legend.key.width = unit(1,"line"))+
coord_cartesian(ylim = c(0, 42000))+
scale_y_continuous(expand=c(0,0))+
scale_x_date(date_labels = "%Y-%m",breaks=breaks)+
labs(x="日期",y="累积下载量")
p
ggplot(data,aes(x=x,y=y,group=package,color=package))+
geom_line(size=2)+
#  geom_text(aes(label=y),vjust=-0.4)+
scale_color_manual(values="red")+
theme_bw()+
theme(panel.grid = element_blank(),
panel.border = element_blank(),
#        panel.background = element_blank(),
axis.text.x = element_text(size = 20,face="bold"),
axis.title.x = element_text(size = 30,face = "bold",margin = margin(t = 10,b = 10)),
axis.line.x.bottom = element_line(size=2),
axis.line.y.left = element_line(size=2),
axis.text.y = element_text(size = 20,face = "bold"),
axis.title.y = element_text(size = 30,face = "bold",,margin = margin(r = 10,l = 10)),
axis.ticks = element_line(size=2),
# axis.line.x.top = element_blank(),
# axis.line.y.right = element_blank(),
legend.title = element_text(size=15,face="bold"),
legend.text = element_text(size=15,face="bold"),
#        legend.position = c(0.5,1),
legend.box.background = element_blank(),
legend.background = element_rect(fill="transparent",color="transparent",size=0.3),
legend.key.height  = unit(0.45,"line"),
legend.key.width = unit(1,"line"))+
coord_cartesian(ylim = c(0, 42000))+
scale_y_continuous(expand=c(0,0))+
scale_x_date(date_labels = "%Y-%m",breaks=breaks)+
labs(x="日期",y="累积下载量")
ggplot(data,aes(x=x,y=y,group=package,color=package))+
geom_line(size=2)+
#  geom_text(aes(label=y),vjust=-0.4)+
scale_color_manual(values="red")+
theme_bw()+
theme(panel.grid = element_blank(),
panel.border = element_blank(),
#        panel.background = element_blank(),
axis.text.x = element_text(size = 20,face="bold"),
axis.title.x = element_text(size = 30,face = "bold",margin = margin(t = 10,b = 10)),
axis.line.x.bottom = element_line(size=2),
axis.line.y.left = element_line(size=2),
axis.text.y = element_text(size = 20,face = "bold"),
axis.title.y = element_text(size = 30,face = "bold",,margin = margin(r = 10,l = 10)),
axis.ticks = element_line(size=2),
# axis.line.x.top = element_blank(),
# axis.line.y.right = element_blank(),
legend.title = element_text(size=20,face="bold"),
legend.text = element_text(size=20,face="bold"),
#        legend.position = c(0.5,1),
legend.box.background = element_blank(),
legend.background = element_rect(fill="transparent",color="transparent",size=0.3),
legend.key.height  = unit(0.45,"line"),
legend.key.width = unit(1,"line"))+
coord_cartesian(ylim = c(0, 42000))+
scale_y_continuous(expand=c(0,0))+
scale_x_date(date_labels = "%Y-%m",breaks=breaks)+
labs(x="日期",y="累积下载量")
source("~/.active-rstudio-document")
a <- c(1,2,3)
if(!requireNamespace("devtools", quietly = TRUE))
install.packages("devtools")
devtools::install_github('FuyiTu/caratREG')
install.packages("ggplot2")
?htest
??htest
install.packages("Rcpp")
install.packages("RcppArmadillo")
Rcpp::sourceCpp("test1.cpp")
library(Rcpp)
Rcpp.package.skeleton("Test")
RcppArmadillo::RcppArmadillo.package.skeleton("Test")
RcppArmadillo::RcppArmadillo.package.skeleton("MulticaratREG")
a <- rnorm(500)
b <- rnorm(500)
t.test(a,b)
a <- rnorm(1)
b <- rnorm(1)
t.test(a,b)
a <- rnorm(2)
b <- rnorm(2)
t.test(a,b)
a <- rnorm(3)
b <- rnorm(3)
t.test(a,b)
test <- t.test(a,b)
test$statistic
test$p.value
a <- rnorm(1)
b <- rnorm(1)
count <- c(0)
res <- c()
for(i in 2:500){
a <- append(a,rnorm(1))
b <- append(b,rnorm(1))
test <- t.test(a,b)
if(test$p.value<0.05){count[i]=1}else{count[i]=0}
res[i-1] <- cumsum(count)/length(count))
}
for(i in 2:500){
a <- append(a,rnorm(1))
b <- append(b,rnorm(1))
test <- t.test(a,b)
if(test$p.value<0.05){
count[i]=1
}else{
count[i]=0
}
res[i-1] <- cumsum(count)/length(count))
}
a <- rnorm(1)
b <- rnorm(1)
count <- c(0)
res <- c()
for(i in 2:500){
a <- append(a,rnorm(1))
b <- append(b,rnorm(1))
test <- t.test(a,b)
if(test$p.value<0.05){
count[i]=1
}else{
count[i]=0
}
res[i-1] <- cumsum(count)/length(count)
}
warnings()
a <- rnorm(1)
b <- rnorm(1)
count <- c(0)
res <- c()
for(i in 2:500){
a <- append(a,rnorm(1))
b <- append(b,rnorm(1))
test <- t.test(a,b)
if(test$p.value<0.05){
count[i]=1
}else{
count[i]=0
}
}
cumsum(count)
setwd("F:/Rprogram/MulticaratREG")
source("F:/Rprogram/MulticaratREG/R/Assign_new.R")
source("~/.active-rstudio-document")
tau <- tau_sc(Y,X2,X1,trt)
Rcpp::sourceCpp("src/est_cal.cpp")
tau <- tau_sc(Y,X2,X1,trt)
sigma2_10 <- sd_sc(Y,X2,X1,trt,1,0)
sigma2_10_ne <- sd_sc_ne(Y,X2,X1,trt,1,0)
sqrt(sigma2_10_ne)
sqrt(sigma2_10)
0.07/2.54
6.5-6.16
0.34/6.5
0.07/2.48
build()
devtools::load_all(".")
library(MulticaratREG)
nA = 3
nest = 3
nS = 4
N_ls = 600
p_s = c(2,2,3,3)/10
pi_a = matrix(rep(c(1,1,1)/3,nS),nA,nS)
#pi_as = matrix(rep(c(0.2,0.4,0.4,0.3,0.3,0.4),2),nA,nS)
p=1
beta <- matrix(rep(1,p),p,1)
beta0 <- matrix(rep(1,p),p,1)
beta1 <- matrix(rep(2,p),p,1)
beta2 <- matrix(rep(3,p),p,1)
beta_as <- matrix(seq(1,6,length.out = p*nS*nA),p,nS*nA)
N=600
X1 <- sample(1:nS,N,prob = p_s,replace = T)
#additional variable
X2 <- matrix(rnorm(N*p,0,1),N,p)
#Treatment Assignment
#trt <- sample(0:(nA-1),N,prob = pi_a,replace = T)
#trt <- scr(X1,nA,p=pi_a)
trt <- sbr(X1,nA,p=pi_a,block_size = 6)
ind0 <- which(trt==0)
ind1 <- which(trt==1)
ind2 <- which(trt==2)
Y0 <- 0 + X1[ind0] + X2[ind0,]%*%beta0
Y1 <- 1 + X1[ind1] + X2[ind1,]%*%beta1
Y2 <- 2 + X1[ind2] + X2[ind2,]%*%beta2
Y <- rep(0,N)
Y[ind0] <- Y0
Y[ind1] <- Y1
Y[ind2] <- Y2
Y <- Y + rnorm(N,0,1)
tau_sc(Y,X,S,trt)
tau_sc(Y,X2,X1,trt)
sd_sc(Y,X2,X1,trt,1,0)
sd_sc_ne(Y,X2,X1,trt,1,0)
sd1 = sd_sc(Y,X2,X1,trt,1,0)
sd2 = sd_sc_ne(Y,X2,X1,trt,1,0)
sqrt(sd1)
sqrt(sd2)
debugSource("F:/Rprogram/MulticaratREG/R/Assign_new.R")
sd1 = sd_sc(Y,X2,X1,trt,1,0)
sd_r
sd_hy
sd_x
sd2 = sd_sc_ne(Y,X2,X1,trt,1,0)
sd_r
sd_hy
sd_x
sd_rx
source("F:/Rprogram/MulticaratREG/R/Assign_new.R")
library(roxygen2)
sample(0:2,600,prob = 1/3)
sample(0:2,600,replace=T,prob = 1/3)
sample(0:2,600,replace=T,prob = rep(1/3,3))
devtools::document()
devtools::document()
devtools::document()
?tau.pi
?tau.pl
nA = 3
nS = 4
N=600
p_s = c(2,2,3,3)/10
pi_a = rep(c(1,1,1)/3)
p=1
beta0 <- matrix(rep(1,p),p,1)
beta1 <- matrix(rep(2,p),p,1)
beta2 <- matrix(rep(3,p),p,1)
X1 <- sample(1:nS,N,prob = p_s,replace = T)
#additional variable
X2 <- matrix(rnorm(N*p,0,1),N,p)
trt <- sample(0:nA-1,N,pi_a)
ind0 <- which(trt==0)
trt <- sample(0:nA-1,N,replace=T,pi_a)
trt <- sample(0:(nA-1),N,replace=T,pi_a)
ind0 <- which(trt==0)
ind1 <- which(trt==1)
ind2 <- which(trt==2)
Y0 <- 0 + X1[ind0] + X2[ind0,]%*%beta0
Y1 <- 1 + X1[ind1] + X2[ind1,]%*%beta1
Y2 <- 2 + X1[ind2] + X2[ind2,]%*%beta2
Y <- rep(0,N)
Y[ind0] <- Y0
Y[ind1] <- Y1
Y[ind2] <- Y2
Y <- Y + rnorm(N,0,1)
tau.pl(Y,trt,B,1,0)#The code replicates the simulation setting of Model 1 in Section 4, Gu et al. (2023).
tau.pl(Y,X=NULL,trt,B,1,0)#The code replicates the simulation setting of Model 1 in Section 4, Gu et al. (2023).
source("F:/Rprogram/MulticaratREG/R/main.R")
tau.pl(Y,X=NULL,trt,B,1,0)#The code replicates the simulation setting of Model 1 in Section 4, Gu et al. (2023).
tau.pl(Y,X=NULL,A=trt,B=B,1,0)
tau.pl(Y,X=NULL,A=trt,B=X1,1,0)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::load_all(".")
?tau.ss
nA = 3
nS = 4
N=600
p_s = c(2,2,3,3)/10
pi_a = rep(c(1,1,1)/3)
p=1
beta0 <- matrix(rep(1,p),p,1)
beta1 <- matrix(rep(2,p),p,1)
beta2 <- matrix(rep(3,p),p,1)
X1 <- sample(1:nS,N,prob = p_s,replace = T)
#additional variable
X2 <- matrix(rnorm(N*p,0,1),N,p)
trt <- sample(0:nA-1,N,replace=T,pi_a)
ind0 <- which(trt==0)
devtools::document()
devtools::load_all(".")
nA = 3
nS = 4
N=600
p_s = c(2,2,3,3)/10
pi_a = rep(c(1,1,1)/3)
p=1
beta0 <- matrix(rep(1,p),p,1)
beta1 <- matrix(rep(2,p),p,1)
beta2 <- matrix(rep(3,p),p,1)
X1 <- sample(1:nS,N,prob = p_s,replace = T)
#additional variable
X2 <- matrix(rnorm(N*p,0,1),N,p)
trt <- sample(0:(nA-1),N,replace=T,pi_a)
ind0 <- which(trt==0)
ind1 <- which(trt==1)
ind2 <- which(trt==2)
Y0 <- 0 + X1[ind0] + X2[ind0,]%*%beta0
Y1 <- 1 + X1[ind1] + X2[ind1,]%*%beta1
Y2 <- 2 + X1[ind2] + X2[ind2,]%*%beta2
Y <- rep(0,N)
Y[ind0] <- Y0
Y[ind1] <- Y1
Y[ind2] <- Y2
Y <- Y + rnorm(N,0,1)
tau.ss(Y,X2,trt,X1,1,0)
library(Rcpp)
Rcpp::compileAttributes()           # this updates the Rcpp layer from C++ to R
library(devtools)
document()
tau.ss(Y,X2,trt,X1,1,0)
load_all()
tau.ss(Y,X2,trt,X1,1,0)
Rcpp::compileAttributes()           # this updates the Rcpp layer from C++ to R
document()
load_all()
tau.ss(Y,X2,trt,X1,1,0)
Rcpp::compileAttributes()           # this updates the Rcpp layer from C++ to R
roxygen2::roxygenize(roclets="rd")  # this updates the documentation
tau.ss(Y,X2,trt,X1,1,0)
library(RcppArmadillo)
Rcpp::compileAttributes()           # this updates the Rcpp layer from C++ to R
roxygen2::roxygenize(roclets="rd")  # this updates the documentation
tau.ss(Y,X2,trt,X1,1,0)
devtools::use_rcpp()
use_rcpp()
Rcpp::compileAttributes()           # this updates the Rcpp layer from C++ to R
roxygen2::roxygenize(roclets="rd")  # this updates the documentation
tau.ss(Y,X2,trt,X1,1,0)
load_all()
tau.ss(Y,X2,trt,X1,1,0)
library(MulticaratREG)
tau.pl(Y,X=NULL,A=trt,B=X1,1,0)
tau.ss(Y,X=X2,A=trt,B=X1,1,0)
use_rcpp()
document()
document()
library(MulticaratREG)
tau.ss(Y,X=X2,A=trt,B=X1,1,0)
tau.sc(Y,X=X2,A=trt,B=X1,1,0)
tau.pl(Y,X=X2,A=trt,B=X1,1,0)
tau.pl(Y,A=trt,B=X1,1,0)
tau.pl(Y,A=trt,B=X1,a=1,b=0)
use_rcpp()
Rcpp::compileAttributes()           # this updates the Rcpp layer from C++ to R
roxygen2::roxygenize(roclets="rd")  # this updates the documentation
document()
load_all()
tau.pl(Y,A=trt,B=X1,a=1,b=0)
tau.ss(Y,A=trt,B=X1,a=1,b=0)
tau.ss(Y,X2,A=trt,B=X1,a=1,b=0)
document()
search()
remove.packages(MulticaratREG)
devtools::load_all(".")
use_rcpp()
Rcpp::compileAttributes()           # this updates the Rcpp layer from C++ to R
roxygen2::roxygenize(roclets="rd")  # this updates the documentation
roxygen2::roxygenize(roclets="rd")  # this updates the documentation
roxygen2::roxygenize(roclets="rd")  # this updates the documentation
document()
library(Rcpp)
library(RcppArmadillo)
library(roxygen2)
library(devtools)
use_rcpp()
Rcpp::compileAttributes()           # this updates the Rcpp layer from C++ to R
roxygen2::roxygenize(roclets="rd")  # this updates the documentation
Rcpp::compileAttributes()           # this updates the Rcpp layer from C++ to R
roxygen2::roxygenize(roclets="rd")  # this updates the documentation
use_rcpp()
roxygen2::roxygenize(roclets="rd")  # this updates the documentation
library(dplyr)
document()
document()
use_rcpp()
Rcpp::compileAttributes()           # this updates the Rcpp layer from C++ to R
roxygen2::roxygenize(roclets="rd")  # this updates the documentation
document
document()
use_rcpp()
document()
document()
library(MulticaratREG)
nA = 3
nS = 4
N=600
p_s = c(2,2,3,3)/10
pi_a = rep(c(1,1,1)/3)
p=1
beta0 <- matrix(rep(1,p),p,1)
beta1 <- matrix(rep(2,p),p,1)
beta2 <- matrix(rep(3,p),p,1)
X1 <- sample(1:nS,N,prob = p_s,replace = T)
#additional variable
X2 <- matrix(rnorm(N*p,0,1),N,p)
trt <- sample(0:(nA-1),N,replace=T,pi_a)
ind0 <- which(trt==0)
ind1 <- which(trt==1)
ind2 <- which(trt==2)
Y0 <- 0 + X1[ind0] + X2[ind0,]%*%beta0
Y1 <- 1 + X1[ind1] + X2[ind1,]%*%beta1
Y2 <- 2 + X1[ind2] + X2[ind2,]%*%beta2
Y <- rep(0,N)
Y[ind0] <- Y0
Y[ind1] <- Y1
Y[ind2] <- Y2
Y <- Y + rnorm(N,0,1)
tau.ss(Y,X2,trt,X1,1,0)
tau.sc(Y,X2,trt,X1,1,0)
tau.ss(Y,X=NULL,trt,X1,1,0)
tau.ss(Y,X=NULL,A=trt,B=X1,a=1,b=0)
tau.pl(Y,X=NULL,A=trt,B=X1,a=1,b=0)
?roxygen2
vignette("rd-other")
vignette("rd-other")
usethis::use_package_doc()
document()
dplry::document()
dplyr::document()
library(Rcpp)
library(RcppArmadillo)
library(roxygen2)
library(devtools)
library(dplyr)
use_rcpp()
Rcpp::compileAttributes()           # this updates the Rcpp layer from C++ to R
roxygen2::roxygenize(roclets="rd")  # this updates the documentation
library(MulticaratREG)
?MulticaratREG
document()
library(MulticaratREG)
?MilticaratREG
?MulticaratREG
devtools::load_all(".")
?MulticaratREG
install.packages(MulticaratREG)
?tau.pl
library(Rcpp)
library(RcppArmadillo)
library(roxygen2)
library(devtools)
library(dplyr)
use_rcpp()
Rcpp::compileAttributes()           # this updates the Rcpp layer from C++ to R
roxygen2::roxygenize(roclets="rd")  # this updates the documentation
load_all()
nA = 3
nS = 4
N=600
p_s = c(2,2,3,3)/10
pi_a = rep(c(1,1,1)/3)
p=1
beta0 <- matrix(rep(1,p),p,1)
beta1 <- matrix(rep(2,p),p,1)
beta2 <- matrix(rep(3,p),p,1)
X1 <- sample(1:nS,N,prob = p_s,replace = T)
#additional variable
X2 <- matrix(rnorm(N*p,0,1),N,p)
trt <- sample(0:(nA-1),N,replace=T,pi_a)
ind0 <- which(trt==0)
ind1 <- which(trt==1)
ind2 <- which(trt==2)
Y0 <- 0 + X1[ind0] + X2[ind0,]%*%beta0
Y1 <- 1 + X1[ind1] + X2[ind1,]%*%beta1
Y2 <- 2 + X1[ind2] + X2[ind2,]%*%beta2
Y <- rep(0,N)
Y[ind0] <- Y0
Y[ind1] <- Y1
Y[ind2] <- Y2
Y <- Y + rnorm(N,0,1)
tau.pl(Y,A=trt,B=X1,a=1,b=0)
use_rcpp()
Rcpp::compileAttributes()           # this updates the Rcpp layer from C++ to R
roxygen2::roxygenize(roclets="rd")  # this updates the documentation
load_all()
roxygen2::roxygenize(roclets="rd")  # this updates the documentation
load_all()
roxygen2::roxygenize(roclets="rd")  # this updates the documentation
load_all()
usethis::use_package("dplyr")
